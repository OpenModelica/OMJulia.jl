var documenterSearchIndex = {"docs":
[{"location":"sendExpression/#sendExpression","page":"sendExpression","title":"sendExpression","text":"","category":"section"},{"location":"sendExpression/","page":"sendExpression","title":"sendExpression","text":"Start a new OMCSession and send scripting API expressions to the omc session with sendExpression().","category":"page"},{"location":"sendExpression/","page":"sendExpression","title":"sendExpression","text":"sendExpression","category":"page"},{"location":"sendExpression/#OMJulia.sendExpression","page":"sendExpression","title":"OMJulia.sendExpression","text":"sendExpression(omc, expr; parsed=true)\n\nSend API call to OpenModelica ZMQ server. See OpenModelica User's Guide Scripting API for a complete list of all functions.\n\nnote: Note\nSome characters in argument expr need to be escaped. E.g. \" becomes \\\". For example scripting API callloadFile(\"/path/to/M.mo\")will translate tosendExpression(omc, \"loadFile(\\\"/path/to/M.mo\\\")\")\n\nwarn: Warn\nOn Windows path separation symbol \\ needs to be escaped \\\\ or replaced to Unix style path / to prevent warnings.loadFile(\"C:\\\\path\\\\to\\\\M.mo\")translate tosendExpression(omc, \"loadFile(\\\"C:\\\\\\\\path\\\\\\\\to\\\\\\\\M.mo\\\")\")  # Windows\nsendExpression(omc, \"loadFile(\\\"/c/path/to/M.mo\\\")\")           # Windows\n\nExample\n\nusing OMJulia\nomc = OMJulia.OMCSession()\nOMJulia.sendExpression(omc, \"getVersion()\")\n\n\n\n\n\n","category":"function"},{"location":"sendExpression/#Examples","page":"sendExpression","title":"Examples","text":"","category":"section"},{"location":"sendExpression/","page":"sendExpression","title":"sendExpression","text":"using OMJulia       # hide\nomc = OMJulia.OMCSession()  # hide\nversion = OMJulia.sendExpression(omc, \"getVersion()\")\nOMJulia.quit(omc)","category":"page"},{"location":"api/#OMJulia.API","page":"OMJulia.API","title":"OMJulia.API","text":"","category":"section"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"Module OMJulia.API aims to provide a Julia interface to the OpenModelica scripting API. In contrast to sending the scripting api calls directly via sendExpression this API has a Julia-like interface and some level of error handling implemented. This means errors will throw Julia Exception OMJulia.API.ScriptingError instead of only printing to stdout.","category":"page"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"warn: Warn\nNot all OMJulia.API functions are tested and some functions could have slightly different default values compared to the OpenModelica scripting API.","category":"page"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"Instead of escaping strings yourself the API interface handles this for you:","category":"page"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"sendExpression(omc, \"loadFile(\\\"$(bouncingBallFile)\\\")\")","category":"page"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"becomes","category":"page"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"API.loadFile(omc, bouncingBallFile)","category":"page"},{"location":"api/#Functions","page":"OMJulia.API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"OMJulia.API","title":"OMJulia.API","text":"Modules = [OMJulia.API]\nOrder   = [:function, :type]\nFilter = t -> t != OMJulia.API.modelicaString","category":"page"},{"location":"api/#OMJulia.API.buildModel-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.buildModel","text":"buildModel(omc, className;\n           startTime = 0.0,\n           stopTime = 1.0,\n           numberOfIntervals = 500,\n           tolerance = 1e-6,\n           method = \"\",\n           fileNamePrefix = className,\n           options = \"\",\n           outputFormat = \"mat\",\n           variableFilter = \".*\",\n           cflags = \"\",\n           simflags = \"\")\n\nBuild Modelica model by generating C code and compiling it into an executable simulation. It does not run the simulation!\n\nSee OpenModelica scripting API buildModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.buildModelFMU-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.buildModelFMU","text":"buildModelFMU(omc, className;\n              version = \"2.0\",\n              fmuType = \"me\",\n              fileNamePrefix=className,\n              platforms=[\"static\"],\n              includeResources = false)\n\nTranslates a modelica model into a Functional Mockup Unit. The only required argument is the className, while all others have some default values.\n\nSee OpenModelica scripting API buildModelFMU.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.cd","page":"OMJulia.API","title":"OMJulia.API.cd","text":"cd(omc, newWorkingDirectory=\"\")\n\nChange directory to the given path newWorkingDirectory (which may be either relative or absolute). Returns the new working directory on success or a message on failure. If the given path is the empty string, the function simply returns the current working directory.\n\nSee OpenModelica scripting API cd.\n\n\n\n\n\n","category":"function"},{"location":"api/#OMJulia.API.closeSimulationResultFile-Tuple{Any}","page":"OMJulia.API","title":"OMJulia.API.closeSimulationResultFile","text":"    closeSimulationResultFile(omc)\n\nCloses the current simulation result file. Only needed by Windows. Windows cannot handle reading and writing to the same file from different processes. To allow OMEdit to make successful simulation again on the same file we must close the file after reading the Simulation Result Variables. Even OMEdit only use this API for Windows.\n\nSee OpenModelica scripting API closeSimulationResultFile.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.getClassNames-Tuple{Any}","page":"OMJulia.API","title":"OMJulia.API.getClassNames","text":"getClassNames(omc;\n              class_ = \"\",\n              recursive = false,\n              qualified = false,\n              sort = false,\n              builtin = false,\n              showProtected = false,\n              includeConstants = false)\n\nReturns the list of class names defined in the class.\n\nSee OpenModelica scripting API getClassNames.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.getErrorString-Tuple{Any}","page":"OMJulia.API","title":"OMJulia.API.getErrorString","text":"getErrorString(omc, warningsAsErrors = false)\n\nReturns the current error message.\n\nSee OpenModelica scripting API getErrorString.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.getInstallationDirectoryPath-Tuple{Any}","page":"OMJulia.API","title":"OMJulia.API.getInstallationDirectoryPath","text":"getInstallationDirectoryPath(omc)\n\nThis returns OPENMODELICAHOME if it is set; on some platforms the default path is returned if it is not set.\n\nSee OpenModelica scripting API getInstallationDirectoryPath.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.getVersion-Tuple{Any}","page":"OMJulia.API","title":"OMJulia.API.getVersion","text":"getVersion(omc)\n\nReturns the version of the Modelica compiler.\n\nSee OpenModelica scripting API getVersion.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.linearize-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.linearize","text":"Creates a model with symbolic linearization matrices.\n\nSee OpenModelica scripting API linearize.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.loadFile-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.loadFile","text":"loadFile(omc, fileName;\n         encoding = \"\",\n         uses = true,\n         notify = true,\n         requireExactVersion = false)\n\nLoad file fileName (*.mo) and merge it with the loaded AST. See OpenModelica scripting API loadFile.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.loadModel-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.loadModel","text":"loadModel(omc, className;\n          priorityVersion = String[],\n          notify = false,\n          languageStandard = \"\",\n          requireExactVersion = false)\n\nLoads a Modelica library.\n\nSee OpenModelica scripting API loadModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.readSimulationResult","page":"OMJulia.API","title":"OMJulia.API.readSimulationResult","text":"readSimulationResult(omc, filename,\n                     variables = String[],\n                     size = 0)\n\nReads a result file, returning a matrix corresponding to the variables and size given.\n\nSee OpenModelica scripting API readSimulationResult.\n\n\n\n\n\n","category":"function"},{"location":"api/#OMJulia.API.readSimulationResultSize-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.readSimulationResultSize","text":"readSimulationResultSize(omc, fileName)\n\nThe number of intervals that are present in the output file.\n\nSee OpenModelica scripting API readSimulationResultSize.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.readSimulationResultVars-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.readSimulationResultVars","text":"readSimulationResultVars(omc, fileName;                          readParameters = true,                          openmodelicaStyle = false)\n\nReturns the variables in the simulation file; you can use val() and plot() commands using these names.\n\nSee OpenModelica scripting API readSimulationResultVars.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.setCommandLineOptions-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.setCommandLineOptions","text":"setCommandLineOptions(omc, option)\n\nThe input is a regular command-line flag given to OMC, e.g. -d=failtrace or -g=MetaModelica.\n\nSee OpenModelica scripting API setCommandLineOptions.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.simulate-Tuple{Any, String}","page":"OMJulia.API","title":"OMJulia.API.simulate","text":"simulate(omc, className;\n        startTime = 0.0,\n        stopTime = nothing,\n        numberOfIntervals = 500,\n        tolerance = 1e-6,\n        method = \"\",\n        fileNamePrefix=className,\n        options = \"\",\n        outputFormat = \"mat\",\n        variableFilter = \".*\",\n        cflags = \"\",\n        simflags = \"\")\n\nSimulates a modelica model by generating C code, build it and run the simulation executable.\n\nSee OpenModelica scripting API simulate.\n\n\n\n\n\n","category":"method"},{"location":"api/#OMJulia.API.ScriptingError","page":"OMJulia.API","title":"OMJulia.API.ScriptingError","text":"ScriptingError <: Exception\n\nOpenModelica scripting error with message msg and additional error string from getErrroString.\n\n\n\n\n\n","category":"type"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"There are three ways to interact with OpenModelica:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"ModelicaSystem: A Julia style scripting API that handles low level API calls.\nOMJulia.API: A Julia style scripting API that handles low level sendExpression calls and has some degree of error handling.\nScripting API with sendExpression: Send expressions to the low level OpenModelica scripting API.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The following examples demonstrate how to simulate Modelica model BouncingBall in both ways.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"model BouncingBall\n  parameter Real e=0.7 \"coefficient of restitution\";\n  parameter Real g=9.81 \"gravity acceleration\";\n  Real h(fixed=true, start=1) \"height of ball\";\n  Real v(fixed=true) \"velocity of ball\";\n  Boolean flying(fixed=true, start=true) \"true, if ball is flying\";\n  Boolean impact;\n  Real v_new(fixed=true);\n  Integer foo;\nequation\n  impact = h <= 0.0;\n  foo = if impact then 1 else 2;\n  der(v) = if flying then -g else 0;\n  der(h) = v;\n\n  when {h <= 0.0 and v <= 0.0,impact} then\n    v_new = if edge(impact) then -e*pre(v) else 0;\n    flying = v_new > 0;\n    reinit(v, v_new);\n  end when;\nend BouncingBall;","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"info: Info\nThe BouncingBall.mo file can be found in your OpenModelica installation directory in <OpenModelcia>/share/doc/omc/testmodels/BouncingBall.mo.","category":"page"},{"location":"quickstart/#modelicasystem","page":"Quickstart","title":"ModelicaSystem","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Start a new OMJulia.OMCSession and create a new ModelicaSystem to build and simulate the BouncingBall model. Afterwards the result can be plotted in Julia.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using OMJulia\nusing CSV, DataFrames, PlotlyJS\nusing PlotlyDocumenter # hide\n\nmod = OMJulia.OMCSession();\n\ninstallDir = sendExpression(mod, \"getInstallationDirectoryPath()\")\nbouncingBallFile = joinpath(installDir, \"share\", \"doc\", \"omc\", \"testmodels\", \"BouncingBall.mo\")\n\nModelicaSystem(mod,\n               bouncingBallFile,\n               \"BouncingBall\")\nsimulate(mod,\n         resultfile = \"BouncingBall_ref.csv\",\n         simflags   = \"-override=outputFormat=csv,stopTime=3\")\n\nresultfile = joinpath(getWorkDirectory(mod), \"BouncingBall_ref.csv\")\ndf = DataFrame(CSV.File(resultfile));\n\nplt = plot(df,\n           x=:time, y=:h,\n           mode=\"lines\",\n           Layout(title=\"Bouncing Ball\", height = 700))\n\nOMJulia.quit(mod)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"PlotlyDocumenter.to_documenter(plt) # hide","category":"page"},{"location":"quickstart/#omjulia-api","page":"Quickstart","title":"OMJulia.API","text":"","category":"section"},{"location":"quickstart/#Example","page":"Quickstart","title":"Example","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Start a new OMJulia.OMCSession and call scripting API directly using the OMJulia.API module.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using OMJulia\nusing OMJulia.API: API\n\nusing CSV, DataFrames, PlotlyJS\nusing PlotlyDocumenter # hide\n\nomc = OMJulia.OMCSession();\nomcWorkDir = mkpath(joinpath(\"docs\", \"omc-temp\"))  # hide\nmkpath(omcWorkDir)                                 # hide\nAPI.cd(omcWorkDir)                                 # hide\ninstallDir = API.getInstallationDirectoryPath(omc)\nbouncingBallFile = joinpath(installDir, \"share\", \"doc\", \"omc\", \"testmodels\", \"BouncingBall.mo\")\nbouncingBallFile = abspath(bouncingBallFile)        # hide\nAPI.loadFile(omc, bouncingBallFile)\nres = API.simulate(omc, \"BouncingBall\"; stopTime=3.0, outputFormat = \"csv\")\nresultfile = res[\"resultFile\"]\ndf = DataFrame(CSV.File(resultfile));\n\nplt = plot(df,\n           x=:time, y=:h,\n           mode=\"lines\",\n           Layout(title=\"Bouncing Ball\", height = 700))\n\nOMJulia.quit(omc)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"PlotlyDocumenter.to_documenter(plt) # hide","category":"page"},{"location":"quickstart/#scripting-api-with-sendExpression","page":"Quickstart","title":"Scripting API with sendExpression","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Start a new OMJulia.OMCSession and send scripting API expressions to the omc session with sendExpression().","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"warn: Warn\nAll special characters inside a string argument for an API function need to be escaped when passing to sendExpression.E.g. MOS commandloadFile(\"/some/path/to/BouncingBall.mo\");becomes Julia codesendExpression(omc, \"loadFile(\\\"/some/path/to/BouncingBall.mo\\\")\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"info: Info\nOn Windows path separation symbol \\ needs to be escaped \\\\ or replaced to Unix style path  / to prevent warnings.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using OMJulia\n\nomc = OMJulia.OMCSession();\nomcWorkDir = mkpath(joinpath(\"docs\", \"omc-temp\"))  # hide\nmkpath(omcWorkDir)                                 # hide\nsendExpression(omc, \"cd(\\\"$(omcWorkDir)\\\")\")       # hide\ninstallDir = sendExpression(omc, \"getInstallationDirectoryPath()\")\nbouncingBallFile = joinpath(installDir, \"share\", \"doc\", \"omc\", \"testmodels\", \"BouncingBall.mo\")\nbouncingBallFile = abspath(bouncingBallFile)        # hide\nif Sys.iswindows()\n    bouncingBallFile = replace(bouncingBallFile, \"\\\\\" => \"/\")\nend\nsendExpression(omc, \"loadFile(\\\"$(bouncingBallFile)\\\")\")\nsendExpression(omc, \"simulate(BouncingBall)\")\nOMJulia.quit(omc)","category":"page"},{"location":"#OMJulia.jl","page":"Home","title":"OMJulia.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia scripting OpenModelica interface.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OMJulia - the OpenModelica Julia API is a free, open source, highly portable Julia based interactive session handler for Julia scripting of OpenModelica API functionality. It provides the modeler with components for creating a complete Julia-Modelica modeling, compilation and simulation environment based on the latest OpenModelica implementation and Modelica library standard available.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OMJulia is structured to combine both the solving strategy and model building. Thus, domain experts (people writing the models) and computational engineers (people writing the solver code) can work on one unified tool that is industrially viable for optimization of Modelica models, while offering a flexible platform for algorithm development and research. OMJulia is not a standalone package, it depends upon the OpenModelica installation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OMJulia is implemented in Julia and depends on ZeroMQ - high performance asynchronous messaging library and it supports the Modelica Standard Library version 4.0 that is included with OpenModelica.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Make sure OpenModelica is installed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install OMJulia.jl with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"OMJulia\")","category":"page"},{"location":"#Features-of-OMJulia","page":"Home","title":"Features of OMJulia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The OMJulia package contains the following features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interactive session handling, parsing, interpretation of commands and Modelica expressions for evaluation, simulation, plotting, etc.\nConnect with the OpenModelica compiler through zmq sockets\nAble to interact with the OpenModelica compiler through the available API\nEasy access to the Modelica Standard library.\nAll the API calls are communicated with the help of the sendExpression method implemented in a Julia module\nThe results are returned as strings","category":"page"},{"location":"modelicaSystem/#Advanced-API","page":"ModelicaSystem","title":"Advanced API","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"A Julia style scripting API that handles low level API calls.","category":"page"},{"location":"modelicaSystem/#ModelicaSystem","page":"ModelicaSystem","title":"ModelicaSystem","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"ModelicaSystem","category":"page"},{"location":"modelicaSystem/#OMJulia.ModelicaSystem","page":"ModelicaSystem","title":"OMJulia.ModelicaSystem","text":"ModelicaSystem(omc, fileName, modelName, library=nothing;\n               commandLineOptions=nothing, variableFilter=nothing)\n\nSet command line options for OMCSession and build model modelName to prepare for a simulation.\n\nArguments\n\nomc:       OpenModelica compiler session, see OMCSession().\nfileName:  Path to Modelica file.\nmodelName: Name of Modelica model to build, including namespace if the              model is wrappen within a Modelica package.\nlibrary:   List of dependent libraries or Modelica files.              This argument can be passed as string (e.g. \"Modelica\")              or tuple (e.g. (\"Modelica\", \"4.0\")              or array (e.g. [\"Modelica\", \"SystemDynamics\"]              or [(\"Modelica\", \"4.0\"), \"SystemDynamics\"]).\n\nKeyword Arguments\n\ncommandLineOptions: OpenModelica command line options, see                       OpenModelica Compiler Flags.\nvariableFilter:     Regex to filter variables in result file.\n\nUsage\n\nusing OMJulia\nmod = OMJulia.OMCSession()\nModelicaSystem(mod, \"BouncingBall.mo\", \"BouncingBall\", [\"Modelica\", \"SystemDynamics\"], commandLineOptions=\"-d=newInst\")\n\nProviding dependent libaries:\n\nusing OMJulia\nmod = OMJulia.OMCSession()\nModelicaSystem(mod, \"BouncingBall.mo\", \"BouncingBall\", [\"Modelica\", \"SystemDynamics\", \"dcmotor.mo\"])\n\nSee also OMCSession().\n\n\n\n\n\nModelicaSystem(omc; modelName, library=nothing,\n               commandLineOptions=nothing, variableFilter=nothing)\n\nSet command line options for OMCSession and build model modelname to prepare for a simulation.\n\nArguments\n\nomc:       OpenModelica compiler session, see OMCSession().\n\nKeyword Arguments\n\nmodelName: Name of Modelica model to build, including namespace if the              model is wrappen within a Modelica package.\nlibrary:   List of dependent libraries or Modelica files.              This argument can be passed as string (e.g. \"Modelica\")              or tuple (e.g. (\"Modelica\", \"4.0\")              or array (e.g. [\"Modelica\", \"SystemDynamics\"]              or [(\"Modelica\", \"4.0\"), \"SystemDynamics\"]).\ncommandLineOptions: OpenModelica command line options, see                       OpenModelica Compiler Flags.\nvariableFilter:     Regex to filter variables in result file.\n\nUsage\n\nusing OMJulia\nmod = OMJulia.OMCSession()\nModelicaSystem(mod, modelName=\"Modelica.Electrical.Analog.Examples.CauerLowPassAnalog\", library=\"Modelica\")\n\nSee also OMCSession().\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"OMJulia.OMCSession\nOMJulia.quit","category":"page"},{"location":"modelicaSystem/#OMJulia.OMCSession","page":"ModelicaSystem","title":"OMJulia.OMCSession","text":"OMCSession <: Any\n\nOMC session struct.\n\n\n\nOMCSession(omc=nothing)\n\nCreate new OpenModelica session.\n\nArguments\n\nomc::Union{String, Nothing}: Path to OpenModelica compiler.                                Use omc from PATH if nothing is provided.\n\nSee also ModelicaSystem, OMJulia.quit.\n\n\n\n\n\n","category":"type"},{"location":"modelicaSystem/#OMJulia.quit","page":"ModelicaSystem","title":"OMJulia.quit","text":"quit(omc::OMCSession; timeout=4::Integer)\n\nQuit OMCSession.\n\nArguments\n\n- `omc::OMCSession`:      OMC session.\n\nKeywords\n\n- `timeout=4::Integer`:   Timeout in seconds.\n\nSee also OMJulia.OMCSession.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#Example","page":"ModelicaSystem","title":"Example","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"Let us see the usage of ModelicaSystem with the help of Modelica model ModSeborgCSTRorg","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"model ModSeborgCSTRorg\n  // Model of original Seborg CSTR in ode form\n  // author: Bernt Lie, University of Southeast Norway,November 7, 2017\n\n  // Parameters\n  parameter Real V = 100 \"Reactor volume, L\";\n  parameter Real rho = 1e3 \"Liquid density, g/L\";\n  parameter Real a = 1 \"Stoichiometric constant, -\";\n  parameter Real EdR = 8750 \"Activation temperature, K\";\n  parameter Real k0 = exp(EdR/350) \"Pre-exponential factor, 1/min\";\n  parameter Real cph = 0.239 \"Specific heat capacity of mixture, J.g-1.K-1\";\n  parameter Real DrHt = -5e4 \"Molar enthalpy of reaction, J/mol\";\n  parameter Real UA = 5e4 \"Heat transfer parameter, J/(min.K)\";\n\n  // Initial state parameters\n  parameter Real cA0 = 0.5 \"Initial concentration of A, mol/L\";\n  parameter Real T0 = 350 \"Initial temperature, K\";\n  // Declaring variables\n  // -- states\n  Real cA(start = cA0, fixed = true) \"Initializing concentration of A in reactor, mol/L\";\n  Real T(start = T0, fixed = true) \"Initializing temperature in reactor, K\";\n  // -- auxiliary variables\n  Real r \"Rate of reaction, mol/(L.s)\";\n  Real k \"Reaction 'constant', ...\";\n  Real Qd \"Heat flow rate, J/min\";\n  // -- input variables\n  input Real Vdi \"Volumetric flow rate through reactor, L/min\";\n  input Real cAi \"Influent molar concentration of A, mol/L\";\n  input Real Ti \"Influent temperature, K\";\n  input Real Tc \"Cooling temperature', K\";\n  // -- output variables\n  output Real y_T \"Reactor temperature, K\";\n  // Equations constituting the model\nequation\n  // Differential equations\n  der(cA) = Vdi*(cAi-cA)/V- a*r;\n  der(T) = Vdi*(Ti-T)/V + (-DrHt)*r/(rho*cph) + Qd/(rho*V*cph);\n  // Algebraic equations\n  r = k*cA^a;\n  k = k0*exp(-EdR/T);\n  Qd = UA*(Tc-T);\n  // Outputs\n  y_T = T;\nend ModSeborgCSTRorg","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"using OMJulia\nmod = OMJulia.OMCSession()\nomcWorkDir = mkpath(joinpath(\"docs\", \"omc-temp\"))  # hide\nmkpath(omcWorkDir)                                 # hide\nsendExpression(mod, \"cd(\\\"$(omcWorkDir)\\\")\")       # hide\nModelicaSystem(mod,\n               joinpath(\"docs\", \"testmodels\", \"ModSeborgCSTRorg.mo\"),\n               \"ModSeborgCSTRorg\")","category":"page"},{"location":"modelicaSystem/#WorkDirectory","page":"ModelicaSystem","title":"WorkDirectory","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"For each OMJulia.OMCSession session a temporary work directory is created and the results are published in that working directory. In order to get the work directory use getWorkDirectory.","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getWorkDirectory","category":"page"},{"location":"modelicaSystem/#OMJulia.getWorkDirectory","page":"ModelicaSystem","title":"OMJulia.getWorkDirectory","text":"getWorkDirectory(omc)\n\nReturn working directory of OMJulia.OMCsession omc.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getWorkDirectory(mod)","category":"page"},{"location":"modelicaSystem/#Build-Model","page":"ModelicaSystem","title":"Build Model","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"buildModel","category":"page"},{"location":"modelicaSystem/#OMJulia.buildModel","page":"ModelicaSystem","title":"OMJulia.buildModel","text":"buildModel(omc; variableFilter=nothing)\n\nBuild modelica model.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\n\nKeyword Arguments\n\nvariableFilter:     Regex to filter variables in result file.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"In case the Modelica model needs to be updated or additional simulation flags needs to be set using sendExpression The buildModel API can be used after ModelicaSystem.","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"buildModel(omc)\nbuildModel(omc, variableFilter=\"a|T\")","category":"page"},{"location":"modelicaSystem/#Get-Methods","page":"ModelicaSystem","title":"Get Methods","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getQuantities\nshowQuantities\ngetContinuous\ngetInputs\ngetOutputs\ngetParameters\ngetSimulationOptions\ngetSolutions","category":"page"},{"location":"modelicaSystem/#OMJulia.getQuantities","page":"ModelicaSystem","title":"OMJulia.getQuantities","text":"getQuantities(omc, name=nothing)\n\nReturn list of all variables parsed from xml file.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}: Names of variables to read from xml file.                                                                      If nothing is provided read all variables.\n\nSee also showQuantities.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.showQuantities","page":"ModelicaSystem","title":"OMJulia.showQuantities","text":"showQuantities(omc, name=nothing)\n\nReturn DataFrame of all variables parsed from xml file.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:     Names of variables to read from xml file.                                                                      If nothing is provided read all variables.\n\nSee also getQuantities.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getContinuous","page":"ModelicaSystem","title":"OMJulia.getContinuous","text":"getContinuous(omc, name=nothing)\n\nReturn continuous variables parsed from xml file.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:  Names of continuous variables to read from xml file.                                                                       If nothing is provided read all continuous variables.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getInputs","page":"ModelicaSystem","title":"OMJulia.getInputs","text":"getInputs(omc, name=nothing)\n\nReturn input variables parsed from xml file. If input variables have no start value the returned value is \"None\".\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:     Names of input variables to read from xml file.                                                                      If nothing is provided read all input variables.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getOutputs","page":"ModelicaSystem","title":"OMJulia.getOutputs","text":"getInputs(omc, name=nothing)\n\nReturn output variables parsed from xml file. If output variables have no start value the returned value is \"None\".\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:  Names of output variables to read from xml file.                                                                       If nothing is provided read all output variables.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getParameters","page":"ModelicaSystem","title":"OMJulia.getParameters","text":"getParameters(omc, name=nothing)\n\nReturn parameter variables parsed from xml file.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:     Names of parameters to read from xml file.                                                                      If nothing is provided read all parameters.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getSimulationOptions","page":"ModelicaSystem","title":"OMJulia.getSimulationOptions","text":"getSimulationOptions(omc, name=nothing)\n\nReturn SimulationOption variables parsed from xml file.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:     Names of parameters to read from xml file.                                                                      If nothing is provided read all parameters.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getSolutions","page":"ModelicaSystem","title":"OMJulia.getSolutions","text":"getSolutions(omc::OMCSession, name=nothing; resultfile=nothing)\n\nRead result file and return simulation results\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}:  Names of variables to read from result file.                                                                       If nothing is provided read all variables.\n\nKeyword Arguments\n\nresultfile::Union{AbstractString, Nothing}:     Path to result file. If nothing is provided use saved result file.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#Examples","page":"ModelicaSystem","title":"Examples","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getQuantities(mod)\ngetQuantities(mod, \"T\")\ngetQuantities(mod, [\"T\",\"cA\"])\nshowQuantities(mod)","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getContinuous(mod)\ngetContinuous(mod, [\"Qd\",\"Tc\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getInputs(mod)\ngetOutputs(mod)","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getParameters(mod)\ngetParameters(mod, [\"a\",\"V\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getSimulationOptions(mod)\ngetSimulationOptions(mod, [\"stepSize\",\"tolerance\"])","category":"page"},{"location":"modelicaSystem/#Reading-Simulation-Results","page":"ModelicaSystem","title":"Reading Simulation Results","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"To read the simulation results, we need to simulate the model first and use the getSolution() API to read the results","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"simulate(mod)","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"The getSolution method can be used in two different ways.","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"using default result filename\nuse the result filenames provided by user","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"This provides a way to compare simulation results and perform regression testing","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getSolutions(mod)\ngetSolutions(mod, [\"time\",\"a\"])","category":"page"},{"location":"modelicaSystem/#Examples-of-using-resultFile-provided-by-user-location","page":"ModelicaSystem","title":"Examples of using resultFile provided by user location","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getSolutions(mod, resultfile=\"C:/BouncingBal/tmpbouncingBall.mat\") //returns list of simulation variables for which results are available , the resulfile location is provided by user\ngetSolutions(mod, [\"time\",\"h\"], resultfile=\"C:/BouncingBal/tmpbouncingBall.mat\") // return list of array","category":"page"},{"location":"modelicaSystem/#Set-Methods","page":"ModelicaSystem","title":"Set Methods","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setInputs\nsetParameters\nsetSimulationOptions","category":"page"},{"location":"modelicaSystem/#OMJulia.setInputs","page":"ModelicaSystem","title":"OMJulia.setInputs","text":"setInputs(omc, name)\n\nSet new values for input variables.\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}}:  String \"Name=value\" or                                                              vector of strings [\"Name1=value1\",\"Name2=value2\",\"Name3=value3\"])\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.setParameters","page":"ModelicaSystem","title":"OMJulia.setParameters","text":"setParameters(omc, name; verbose=true)\n\nSet parameter values for parameter variables defined by users\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}}:  String \"Name=value\" or                                                              vector of strings [\"Name1=value1\",\"Name2=value2\",\"Name3=value3\"])\n\nKeyword Arguments\n\nverbose::Bool:     Display additional info if setParameters failed.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.setSimulationOptions","page":"ModelicaSystem","title":"OMJulia.setSimulationOptions","text":"setSimulationOptions(omc, name)\n\nSet simulation option values like stopTime or stepSize.\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}}:  String \"Name=value\" or                                                              vector of strings [\"Name1=value1\",\"Name2=value2\",\"Name3=value3\"])\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#Examples-2","page":"ModelicaSystem","title":"Examples","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setInputs(mod, \"cAi=100\")\nsetInputs(mod, [\"cAi=100\",\"Ti=200\",\"Vdi=300\",\"Tc=250\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setParameters(mod, \"a=3\")\nsetParameters(mod, [\"a=4\",\"V=200\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setSimulationOptions(mod, [\"stopTime=2.0\", \"tolerance=1e-08\"])","category":"page"},{"location":"modelicaSystem/#Advanced-Simulation","page":"ModelicaSystem","title":"Advanced Simulation","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"simulate","category":"page"},{"location":"modelicaSystem/#OMJulia.simulate","page":"ModelicaSystem","title":"OMJulia.simulate","text":"simulate(omc; resultfile=nothing, simflags=\"\", verbose=false)\n\nSimulate modelica model.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session, see OMCSession().\n\nKeyword Arguments\n\nresultFile::Union{String, Nothing}: Result file to write simulation results into.\nsimflags::String:                   Simulation flags, see Simulation Runtime Flags.\nverbose::Bool:                      [debug] Log cmd call to log.txt and error.txt.\n\nExamples\n\nsimulate(omc)\n\nSpecify result file:\n\nsimulate(omc, resultfile=\"tmpresult.mat\")\n\nSet simulation runtime flags:\n\nsimulate(omc, simflags=\"-noEmitEvent -override=e=0.3,g=9.3\")\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"An example of how to do advanced simulation to set parameter values using set methods and finally simulate the \"ModSeborgCSTRorg.mo\" model is given below .","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getParameters(mod)\nsetParameters(mod, \"a=3.0\")","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"To check whether new values are updated to model , we can again query the getParameters().","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getParameters(mod)","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"Similary we can also use setInputs() to set a value for the inputs during various time interval can also be done using the following.","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setInputs(mod, \"cAi=100\")","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"And finally we simulate the model","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"simulate(mod)","category":"page"},{"location":"modelicaSystem/#Linearization","page":"ModelicaSystem","title":"Linearization","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"linearize\ngetLinearizationOptions\nsetLinearizationOptions\ngetLinearInputs\ngetLinearOutputs\ngetLinearStates","category":"page"},{"location":"modelicaSystem/#OMJulia.linearize","page":"ModelicaSystem","title":"OMJulia.linearize","text":"function which returns the linearize model of modelica model, The function returns four matrices A, B, C, D\n\nlinearize(omc; lintime = nothing, simflags= nothing, verbose=true)\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\n\nKeyword Arguments\n\nlintime : Value specifies a time where the linearization of the model should be performed\nsimflags: Simulation flags, see Simulation Runtime Flags.\n\nExamples of using linearize() API\n\nlinearize(omc)\n\nSpecify result file:\n\nlinearize(omc, lintime=\"0.5\")\n\nSet simulation runtime flags:\n\nlinearize(omc, simflags=\"-noEmitEvent\")\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getLinearizationOptions","page":"ModelicaSystem","title":"OMJulia.getLinearizationOptions","text":"getLinearizationOptions(omc, name=nothing)\n\nReturn linearization options.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}, Nothing}: Names of linearization options.                                                                      If nothing is provided return all linearization options.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.setLinearizationOptions","page":"ModelicaSystem","title":"OMJulia.setLinearizationOptions","text":"setLinearizationOptions(omc, name)\n\nSet linearization options.\n\nArguments\n\nomc::OMCSession:        OpenModelica compiler session.\nname::Union{<:AbstractString, Array{<:AbstractString,1}}:  String \"Name=value\" or                                                              vector of strings [\"Name1=value1\",\"Name2=value2\",\"Name3=value3\"])\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getLinearInputs","page":"ModelicaSystem","title":"OMJulia.getLinearInputs","text":"getLinearInputs(omc)\n\nReturn linear input variables after the model is linearized\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getLinearOutputs","page":"ModelicaSystem","title":"OMJulia.getLinearOutputs","text":"getLinearOutputs(omc)\n\nReturn linear output variables after the model is linearized\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#OMJulia.getLinearStates","page":"ModelicaSystem","title":"OMJulia.getLinearStates","text":"getLinearStates(omc)\n\nReturn linear state variables after the model is linearized\n\nArguments\n\nomc::OMCSession: OpenModelica compiler session.\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#Examples-3","page":"ModelicaSystem","title":"Examples","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getLinearizationOptions(mod)\ngetLinearizationOptions(mod, [\"startTime\",\"stopTime\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"setLinearizationOptions(mod,[\"stopTime=2.0\",\"tolerance=1e-06\"])","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"res = linearize(mod)","category":"page"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"getLinearInputs(mod)\ngetLinearOutputs(mod)\ngetLinearStates(mod)","category":"page"},{"location":"modelicaSystem/#Sensitivity-Analysis","page":"ModelicaSystem","title":"Sensitivity Analysis","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"sensitivity","category":"page"},{"location":"modelicaSystem/#OMJulia.sensitivity","page":"ModelicaSystem","title":"OMJulia.sensitivity","text":"sensitivity(omc::OMCSession, Vp, Vv, Ve=[1e-2])\n\nMethod for computing numeric sensitivity of OpenModelica object.\n\nArguments\n\nomc::OMCSession:                OpenModelica compiler session.\nVp::Array{<:AbstractString, 1}:   Modelica Parameter names.\nVv::Array{<:AbstractString, 1}:   Modelica Variable names.\nVe::Array{Float64, 1}:          Excitations of parameters; defaults to scalar 1e-2\n\nReturn\n\nVSname::Vector{Vector{String}}:             Vector of sensitivity names\nVSarray::Vector{Vector{Vector{Float64}}}:   Vector of sensitivies: vector of elements per parameter\n\nEach element containing time series per variable\n\n\n\n\n\n","category":"function"},{"location":"modelicaSystem/#Examples-4","page":"ModelicaSystem","title":"Examples","text":"","category":"section"},{"location":"modelicaSystem/","page":"ModelicaSystem","title":"ModelicaSystem","text":"(Sn, Sa) = sensitivity(mod, [\"UA\",\"EdR\"], [\"T\",\"cA\"], [1e-2,1e-4])\nOMJulia.quit(mod) # hide","category":"page"}]
}
